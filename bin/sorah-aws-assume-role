#!/usr/bin/env ruby
require 'etc'
require 'aws-sdk-s3' # Workaround of load failure
require 'aws-sdk-sts'

unless ARGV[0]
  abort "Usage #$0 [-q] ARN [cmd]"
end

quiet = ARGV.delete('-q')
mfa = ARGV.delete('--mfa')
arn = ARGV.shift
user = ENV['USER'] || Etc.getpwuid(Process.uid).name
session_name = user

@sts = Aws::STS::Client.new(region: 'us-east-1')
def identity
  @identity ||= @sts.get_caller_identity()
end


unless arn.start_with?('arn:')
  arn = "arn:aws:iam::#{identity.account}:role/#{arn}"
end

if mfa
  mfa_serial = "arn:aws:iam::#{identity.account}:mfa/#{identity.arn.split(?/).last}"
end

options = {
  role_arn: arn,
  role_session_name: session_name,
}
options[:duration_seconds] = ENV['EXPIRES_IN'].to_i if ENV['EXPIRES_IN']

if mfa_serial
  options[:serial_number] = mfa_serial
  print '2FA Token: '
  options[:token_code] = $stdin.gets.chomp
end

puts "=> Assuming #{arn}" unless quiet
credentials = begin
  @sts.assume_role(options).credentials
end

puts " * Expires at: #{credentials.expiration} (#{'%.2f' % (credentials.expiration - Time.now)}s)" unless quiet
if options[:duration_seconds]
  puts " * (requested #{options[:duration_seconds]}s)" unless quiet
end

ENV['AWS_ACCESS_KEY_ID'] = credentials.access_key_id
ENV['AWS_SECRET_ACCESS_KEY'] = credentials.secret_access_key
ENV['AWS_SESSION_TOKEN'] = credentials.session_token

ENV['AWS_DEFAULT_REGION'] ||= 'ap-northeast-1'
ENV['AWS_REGION'] ||= 'ap-northeast-1'

ENV['SORAH_PROMPT_HOSTNAME'] ||= arn.split(?/).last
ENV.delete 'EXPIRES_IN'

if ARGV.empty?
  exec ENV['SHELL'] || 'bash'
else
  exec(*ARGV)
end
