#!/usr/bin/env ruby
require 'whois'
require 'ipaddr'

@whois = Whois::Server::Adapters::Standard.new(nil, nil, "whois.radb.net")

def as_set_members(query)
  warn "as_set_members(#{query.inspect})"
  resp = @whois.lookup("-T as-set #{query}")
  resp.to_s.gsub(/\r?\n\s+/, ' ').each_line.grep(/^members:/).flat_map { |_| _.chomp.gsub(/^members:\s*/, '').split(/,\s*|\s+/) }
end

def as_set_asns(query, skip: [])
  return [] if skip.include?(query)
  warn "as_set_asns(#{query.inspect})"
  as_sets, asns = as_set_members(query).partition { |_| _.start_with?('AS-') }
  (asns + as_sets.map { |_| as_set_asns(_, skip: [query,*skip,*asns]) }).flatten.uniq
end

def as_routes(origin, family: nil)
  #warn "as_routes(#{origin})"
  resp = @whois.lookup("-i origin #{origin}")
  resp.parts.flat_map do |part|
    part.body.each_line.grep(/^route6?:\s*/)
      .map { |_| _.sub(/^route6?:\s*/, '')&.chomp }
      .map { |_| [IPAddr.new(_), _.split(?/).last.to_i] }
      .select { |a,l| family.nil? || a.family == family }
      .uniq
      .sort_by { |a,l| [a.to_i, l] }
  end.compact
end

family = nil
family = Socket::AF_INET if ARGV.delete('-4')
family = Socket::AF_INET6 if ARGV.delete('-6')

asns = as_set_asns(ARGV[0])

puts "define AS_SET_ROUTES_#{ARGV[0].gsub(/^AS-/,'').gsub(/-/,'_')} = ["
asns.each do |asn|
  puts "  /* #{asn} */"
  as_routes(asn, family: family).each do |(prefix, prefixlen)|
    puts "  #{prefix}/#{prefixlen},"
  end
end
puts "];"
