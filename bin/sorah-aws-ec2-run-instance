#!/usr/bin/env ruby
require 'optparse'
require 'open-uri'
require 'tempfile'
require 'aws-sdk-s3'
require 'aws-sdk-ec2'
require 'json'
require 'yaml'
require 'logger'

Aws.config[:logger] = Logger.new($stderr)

VPC_CACHE = File.expand_path '~/tmp/sorah-vpc.cachev1.yml'
#AMI_CACHE = File.expand_path '~/tmp/sorah-ami.cachev1.json'

edit = nil

options = {
  names: [],
  instance_type: 't2.micro',
  vpc: nil,
  subnets: [],
  security_groups: %w(default),
  image_id: nil,
  key_name: 'sorah',
  public_ip: nil,
  volumes: { '/dev/sda1' => { device_name: '/dev/sda1', ebs: {volume_size: 15, volume_type: 'gp2'} } },
  role: nil,
  ebs_optimized: false,
  wait: false,
}

parser = OptionParser.new do |_|
  _.on('--no-edit') { edit = false }
  _.on('-e', '--edit') { edit = true }

  _.on('-w', '--wait') { options[:wait] = true }

  _.on('-n NAME', '--name NAME') { |n| options[:names] << n }

  _.on('-t TYPE', '--type TYPE') { |t| options[:instance_type] = t }

  _.on('-v VPC', '--vpc VPC') { |v| options[:vpc] = v }
  _.on('-s SUBNET', '--subnet SUBNET') { |s| options[:subnets] << s }

  _.on('--no-default-sg') { security_groups.delete('default') }
  _.on('-g SECURITYGROUP', '--sg SECURITYGROUP') { |g| options[:security_groups] << g }

  _.on('-i IMAGE', '--image') { |i| options[:image_id] = i }

  _.on('-k KEY', '--key KEY') { |k| options[:key_name] = k }

  _.on('-p', '--public-ip') { options[:public_ip ] = true }
  _.on('-P', '--no-public-ip') { options[:public_ip] = false }

  _.on('--ebs VOL', '-V VOL') { |v|
    param = v.split(?,).map { |kv| k,v=kv.split(?=,2); [k.to_sym, v] }.to_h
    spec = {
      device_name: param[:device] || param[:dev],
      ebs: {
        volume_type: param[:type] || 'standard',
        volume_size: (param[:size] || 15).to_i,
      }
    }
    spec[:ebs][:iops] = param[:iops] if param.key?(:iops)
    spec[:ebs][:snapshot_id] = param[:snapshot] if param.key?(:iops)
    options[:volumes][spec[:device_name]] = spec
  }

  _.on('-r ROLE', '--role ROLE') { |r| options[:role]= r }

  _.on('--ebs-optimized') { options[:ebs_optimized] = true }

  _.on('-T TAG', '--tag TAG') { |ts| k,v = ts.split(/[=:]/,2); (options[:tags] ||= {})[k] = v }
end

args = parser.parse(ARGV)

#######

@account_canonical_id = Aws::S3::Client.new(region: 'ap-northeast-1').list_buckets.owner.id
@vpc_cache = File.exist?(VPC_CACHE) ? YAML.load(File.read(VPC_CACHE)) : {}

@vpc_cache_touched = false
at_exit {
  if @vpc_cache_touched
    File.write VPC_CACHE, YAML.dump(@vpc_cache)
  end
}

def regions
  @regions ||= Aws::EC2::Client.new(region: ENV['AWS_DEFAULT_REGION'] || 'ap-northeast-1').describe_regions.regions.map(&:region_name)
end

def vpcs(refresh: false)
  @vpc_cache[@account_canonical_id] = nil if refresh
  @vpc_cache_touched = true
  @vpc_cache[@account_canonical_id] ||= begin
    regions.map do |region|
      Thread.new do
        ec2 = Aws::EC2::Resource.new(region: region)
        ec2.vpcs.map do |vpc|
          Thread.new do
            vpc_name_tag = vpc.tags.find { |_| _.key == 'Name' }
            next unless vpc_name_tag
            subnets = vpc.subnets.map do |subnet|
              subnet_name_tag = subnet.tags.find { |_| _.key == 'Name' }
              next unless subnet_name_tag
              p [subnet_name_tag.value, id: subnet.subnet_id, cidr: subnet.cidr_block]
            end.compact.to_h
            [vpc_name_tag.value, id: vpc.vpc_id, subnets: subnets, region: region]
          end
        end.map(&:value).compact
      end
    end.flat_map(&:value).to_h
  end
end


#######

if edit.nil?
  edit = options[:names].empty? || options[:image_id].nil? || options[:vpc].nil? || options[:subnets].empty?
end

if edit
  options = YAML.load(Tempfile.create("runinstance") { |f| f.puts options.to_yaml; f.flush; system(*%w(vi -N -u NORC --noplugin), f.path); f.rewind; f.read })
end

region = vpcs[options[:vpc]][:region]
ec2 = Aws::EC2::Resource.new(region: region)
vpc = ec2.vpc(vpcs[options[:vpc]][:id])

image = case options[:image_id]
when /\Aami-/
  ec2.image(options[:image_id])
when 'gentoo-build', nil
  ec2.images(owners: %w(self), filters: [name: 'name', values: %w(gentoo-2*)]).sort_by {|_| Time.parse(_.creation_date) }.last
when 'gentoo', nil
  ec2.images(owners: %w(self), filters: [name: 'name', values: %w(nkmi-base-gentoo-2*)]).sort_by {|_| Time.parse(_.creation_date) }.last
when 'arch'
  ec2.images(owners: %w(093273469852), filters: [name: 'name', values: %w(arch-linux-hvm-*-ebs)]).sort_by {|_| Time.parse(_.creation_date) }.last
when 'nkmi-arch'
  ec2.images(owners: %w(self), filters: [name: 'name', values: %w(nkmi-base-arch-2*)]).sort_by {|_| Time.parse(_.creation_date) }.last
when /\Aubuntu-(.+)/
  image_id = open("https://cloud-images.ubuntu.com/query/#{$1}/server/released.current.txt",&:read).each_line.lazy.map { |_|
    name,_,_,release,type,arch,iregion,image_id,_,_,vt = _.chomp.split(?\t)
    {name: name, release: release, type: type, arch: arch, region: iregion, image_id: image_id, virtualization_type: vt}
  }.find { |release|
    release[:name] == $1 && release[:region] == region && release[:virtualization_type] == 'hvm' && release[:type] == 'ebs-ssd'
  }[:image_id]
  ec2.image(image_id)
#when /\A{/
#  JSON.parse(options[:image_id])
end

block_device_mappings = options[:volumes].values
security_groups = vpc.security_groups(filters: [name: 'group-name', values: options[:security_groups]]).map(&:group_id).uniq

instances = options[:names].flat_map.with_index do |name, index|
  subnet_name = options[:subnets][index % options[:subnets].size]
  subnet = vpcs[options[:vpc]][:subnets][subnet_name]

  run_instance_options = {
    min_count: 1,
    max_count: 1,
    image_id: image.image_id,
    key_name: options[:key_name],
    instance_type: options[:instance_type],
    block_device_mappings: block_device_mappings,
    disable_api_termination: options[:disable_api_termination],
    network_interfaces: [
      {
        device_index: 0,
        subnet_id: subnet[:id],
        groups: security_groups,
        delete_on_termination: true,
        associate_public_ip_address: options[:public_ip],
      },
    ],
    iam_instance_profile: {
      name: options[:role],
    },
    ebs_optimized: options[:ebs_optimized],
  }

  if options[:public_ip].nil?
    run_instance_options[:network_interfaces].each do |nic|
      nic.delete :associate_public_ip_address
    end
  end

  tags = {'Name' => name}.merge(options[:tags] || {}).map do |k, v|
    {key: k.to_s, value: v.to_s}
  end

  Thread.new do
    ec2.create_instances(run_instance_options).to_a.tap do |instances|
      instances.each do |instance|
        instance.create_tags(tags: tags)
      end
    end
  end
end.flat_map(&:value)

until instances.all? { |_| _.private_ip_address }
  instances.map! do |instance|
    instance.reload
  end
end

instances.each do |instance|
  pubip_info = if instance.public_dns_name
                 ": #{instance.public_dns_name} (#{instance.public_ip_address})"
               end
  warn "- #{instance.instance_id} (#{instance.vpc_id} / #{instance.subnet_id} / #{instance.placement.availability_zone})#{pubip_info}"
end

if options[:wait]
  instances.map do |instance|
    Thread.new do
      instance.wait_until(max_attempts:120, delay: 20) { |i| i.state.name == 'running' }
    end
  end.each(&:join)
end

######

