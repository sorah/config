#!/bin/bash
name="${NAME}"
if [[ -z "$name" ]]; then
  name=$(grep '^Source:' debian/control|head -n1|cut -d ' ' -f 2)
fi

dist=$1
version="$2"

if [ x"$dist" = x"" ]; then
  echo "Usage: $0 <dist> <version>"
  echo "NAME=${name}"
  exit 1
fi

set -ex
export GPG_TTY=$(tty)
here="$(pwd)"

out_dir=${OUT_DIR}
if [[ -z $out_dir ]]; then
  out_dir=debian/out
fi

mkdir -p $out_dir

if [ -n "${NO_CACHE}" ]; then
  NO_CACHE=--no-cache
fi

if [ -e debian/Dockerfile.${dist} ]; then
  image_tag=debuild-${name}-${dist}
  docker build --build-arg BUILDDATE=$(date +%Y%m%d) -f debian/Dockerfile.${dist} -t "$image_tag" "${here}/debian" $NO_CACHE
else
  image_tag=debuild-common-${dist}
  docker build --build-arg BUILDDATE=$(date +%Y%m%d) -f ~/git/config/debuild-docker/Dockerfile.${dist} -t "$image_tag" ~/git/config/debuild-docker $NO_CACHE
fi

source_archive=".tmp_$$_${name}.tar.gz"
git archive --format=tar --prefix "${name}-${version}/" HEAD | gzip > "${out_dir}/$source_archive"

if [ -n "${version}" ]; then
  orig_archive="${name}_${version}.orig.tar.gz"
  if [ ! -e $orig_archive ]; then
    version_tag=$(ruby -e 'puts ARGV.first.tr("~:","_%")' "${version}")
    git archive --format=tar --prefix "${name}-${version}/" "upstream/${version_tag}" | gzip > "${out_dir}/$orig_archive"
  fi
fi

bootstrap_cmds=$(mktemp)
cat >${bootstrap_cmds} <<-EOF
useradd -u $(id -u) -m buildbot
chown buildbot:buildbot /build
chown buildbot:buildbot /home/buildbot
cp /run.sh /run2.sh
chown buildbot:buildbot /run2.sh

if [ ! -e /control ]; then
  mk-build-deps -r -i -t 'apt-get -y -o Debug::pkgProblemResolver=yes --no-install-recommends' /debian/control
fi
su buildbot -c 'bash -xe /run2.sh'

echo "\$(basename -s .dsc /build/*.dsc)" > /output/.last-$$
mkdir /output/.$$
ls /build
cat */debian/files
cat */debian/files | cut -d' ' -f1 | xargs cp -p -v -t /output/
cp -pv /build/*.{dsc,changes} /output/
cp -pv /build/*.debian.tar* /output/ || :
cp -pv /build/*.tar* /output/ || :
cp -v /build/*/debian/*.symbols /output/.$$/ || :
chown $(id -u):$(id -g) /output/*
chown -R $(id -u):$(id -g) /output/.$$
chown -R $(id -u):$(id -g) /output/.last-$$
EOF

cmds=$(mktemp)
cat >${cmds} <<-EOF
#gpg2 --import < /pub.asc
#export DEBSIGN_KEYID=0x\$(gpg2 --with-colons --list-keys|grep '^sub:'|head|cut -d: -f 5)

cd /build
tar xf /output/${source_archive}
ln -s /output/${source_archive} /build/
if [ -e /output/${orig_archive} ]; then
  ln -s /output/${orig_archive} /build/
fi
mv "${name}-${version}" ${name}
cd "${name}"
#rm -rf debian
#cp -a /debian .
#rm -rf ./debian/out

sed -i -e 's/_dist_/${dist}/g' debian/changelog
sed -i -e 's/~dist) unstable; urgency=/~${dist}) ${dist}; urgency=/g' debian/changelog
sed -i -e 's/~dist) unstable-proposed; urgency=/~${dist}) ${dist}-proposed; urgency=/g' debian/changelog
sed -i -e 's/~dist)/~${dist})/g' debian/changelog

debuild -us -uc
EOF

#  --volume "${gpg_public_key}:/pub.asc" \
docker run \
  --privileged \
  --net=host \
  --tty \
  --interactive \
  --volume "${here}/debian:/debian:ro" \
  --volume "${here}/${out_dir}:/output" \
  --volume "${gpg_agent_socket}:/home/buildbot/.gnupg/S.gpg-agent" \
  --volume "${cmds}:/run.sh:ro" \
  --volume "${bootstrap_cmds}:/bootstrap.sh:ro" \
  -e DEBSIGN_KEYID \
  -e GPGUSER \
  --workdir /build \
  "$image_tag" \
  bash -xe /bootstrap.sh

cp -v ${out_dir}/.$$/*.symbols debian/ || :

if [[ -z $NO_SIGN ]]; then
  sorah-debsign ${out_dir}/$(cat ${out_dir}/.last-$$)*changes

  tag="$(ruby -e 'dist = ARGV.first; puts File.open("debian/changelog", "r", &:gets).match(/\((.+?)\)/)[1].sub(/~dist/, "~#{dist}").gsub(/\.(?=\.|$|lock$)/, ".#").tr("~:","_%")' "${dist}")"
  deb_version="$(head -n1 debian/changelog|grep --only-matching -P '(?<=\().+?(?=\))'|sed -e "s/~dist/~${dist}/g")"
fi
if [[ -z $NO_TAG ]]; then
  git tag -s -m "${name} Debian release ${deb_version}" debian/${tag}
  git show --summary debian/${tag} | cat
fi

