#!/usr/bin/env ruby
require 'shellwords'
ARCH = ENV['ARCH'] || 'amd64'
ARCH_FILTER = ENV['ARCH_FILTER']&.split(/,\s*/)
DIST_FILTER = ENV['DIST_FILTER']&.split(/,\s*/)
NO_MERGE = ENV['NO_MERGE']
CHECK = ENV['CHECK']

def debian_version(dist)
  line = File.open("debian/changelog", "r", &:gets)
  [
    line.split(' ',2)[0],
    line.match(/\((.+?)\)/)[1].sub(/~dist/, "~#{dist}").gsub(/\.(?=\.|$|lock$)/, ".#"),
  ]
end

BuildOption = Struct.new(:distro, :arch, :dist, :master, keyword_init: true)
config = File.read(File.expand_path('~/git/config/etc/debian-packages.txt'))
  .each_line
  .map { |line| c = line.split(/\s+/); [c[0], c[1..-1]] }
  .group_by(&:first)
  .map do |source, lines|
    [
      source,
      lines.flat_map do |(_s, options)|
       args, distros = options.partition { |_| _.start_with?('--') }
       args = args.map { |_| _.match(/^--(.+?)(?:=(.+))?$/) }.compact.map { |_| [_[1].to_sym, _[2]] }.to_h
       distros.reverse.map do |distro|
         BuildOption.new(**args.merge(distro: distro))
       end
      end
    ]
end.to_h

source = File.read('./debian/control').lines.grep(/^Source: /).first&.split(/\s+/)&.fetch(1) || File.basename(Dir.pwd)
build_options = config.fetch(source)

# def system(*a); p a; end

pp build_options
sleep 3

change_files = []

build_options.each do |opt|
  next if DIST_FILTER && !DIST_FILTER.include?(opt.distro)

  if opt.dist
    master = opt.master || 'master'
    system("git", "checkout", "#{opt.dist}/#{opt.distro}", exception: true)
    # system("git", "reset", "--hard", "origin/#{args['dist']}/#{distro}") or system("git", "reset", "--hard", master, exception: true)
    unless NO_MERGE
      system("git", "merge", "--no-ff", "--no-edit", master, exception: true)
    end
  end

  debname, debver = debian_version(opt.distro)

  archs = (opt.arch || ARCH).split(?,)
  archs.each do |arch|
    next if ARCH_FILTER && !ARCH_FILTER.include?(arch)

    puts "===> #{opt.inspect} @ #{arch}"

    change_file = "debian/out/#{debname}_#{debver}_#{arch}.changes"
    change_files << change_file
    if File.exist?(change_file)
      puts "skip (#{change_file})"
      next
    end

    cmd = case arch
    when ARCH
      ["sorah-debuild", opt.distro, *ARGV]
    when 'arm64'
      ["sorah-debuild-codebuild", '--arm', opt.distro, *ARGV]
    else
      raise "unsupported arch #{arch.inspect}"
    end
    puts "$ #{cmd.shelljoin}"

    res = CHECK ? true : system(*cmd)

    unless res
      warn "!!!!!!!!!!!!!!!!! #{opt.inspect}; failed at #{opt.distro} @ #{arch}: #{cmd.shelljoin}"
      print "hit return to continue after investigated"
      $stdin.gets
    end
  end
end

if CHECK
  puts "-------- check -------"
  ok = true
  change_files.each do |f|
    e = File.exist?(f)
    puts "* #{f} #{e ? '[ ok ]' : '[ MISSING ]'}"
    ok &&= e
  end
  exit 1 unless ok
end
