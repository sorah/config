#!/usr/bin/env ruby
require 'shellwords'
require 'yaml'
require 'fileutils'
require 'octokit'
require 'logger'
require 'aws-sdk-s3'
require 'net/http'
require 'net/https'
require 'uri'

CONFIG_FILE = File.expand_path('~/.nkmi-deb-release')

if ARGV.size < 2
  abort 'Usage: nkmi-deb-release repo [path/to.changes ...]'
end

Aws::S3::Client.new(region: 'ap-northeast-1', logger: Logger.new($stdout)).list_buckets

puts "=> Destination"
puts

case ARGV.shift
when 'bintray-original'
  target = :bintray
  gh_organization = 'nkmideb'
  bintray_repo = 'nekomit/deb-originals'
  puts "   bintray: #{bintray_repo}"
  puts "   gh_org: #{gh_organization}"
when 'ruby'
  target = :aptly
  gh_organization = 'sorah-rbpkg'
  aptly_endpoint = 's3:sorah-ruby:'
  aptly_repo = 'sorah-ruby'
  aptly_gpg_key = '805E57E2327EE86EB8180E0669CEB9D53F0F56A8'
  puts "   aptly #{aptly_endpoint.inspect}"
when 'nkmideb'
  target = :aptly
  gh_organization = 'nkmideb'
  aptly_endpoint = 's3:nkmideb:'
  aptly_repo = 'nkmideb'
  aptly_gpg_key = '3D38A16556C57C162F0D6F5AA3599225C3FF3305'
  puts "   aptly #{aptly_endpoint.inspect}"
else
  raise
end

puts

def parse_debian_metafile(str)
  if str.start_with?('-----BEGIN PGP SIGNED MESSAGE-----')
    raw = str.match(/-----BEGIN PGP SIGNED MESSAGE-----\n.+?\n\n(.+)-----BEGIN PGP SIGNATURE-----/m)[1]
  else
    raw = str
  end

  pairs = raw.each_line.map(&:chomp).reject(&:empty?).slice_before { |_| _[0] != ' ' }.map { |_| key, val = _.first.split(': ', 2); [key.sub(/: ?\z/,''), [val.nil? || val.empty? ? nil : val, *_[1..-1].map{ |_| _.sub(/^ /,'') }].compact] }
  Hash[pairs]
end

config = File.exist?(CONFIG_FILE) ? YAML.load_file(CONFIG_FILE) : {}
configuration_changed = false

unless config['github_token']
  print "Tell me your GitHub access token: "
  config['github_token'] = $stdin.gets.chomp
  configuration_changed = true
end

#unless config['bintray_api_key']
#  print "bintray_api_key ($USER:$KEY): "
#  config['bintray_api_key'] = $stdin.gets.chomp
#  configuration_changed = true
#end
#
#unless config['bintray_gpg_key_passphrase']
#  print "bintray_gpg_key_passphrase: "
#  config['bintray_gpg_key_passphrase'] = $stdin.gets.chomp
#  configuration_changed = true
#end

if configuration_changed
  File.open(CONFIG_FILE, 'w', 0600) do |io|
    io.puts config.to_yaml
  end
end

octo = Octokit::Client.new(access_token: config['github_token'])

deb_files = []

ARGV.map do |change_path|
  changes = File.read(change_path)
  change_arch = change_path.match(/_([a-z0-9]+?)\.changes\z/)[1]

  change_fields = parse_debian_metafile(changes)
  
  package_name = change_fields['Source'][0]
  version = change_fields['Version'][0]
  distro = change_fields['Distribution'][0]
  arch = change_fields['Architecture'][0].split(/\s+/).grep_v('source').first

  case
  when /^ruby2\.\d+$/ === package_name
    repo_name = "ruby"
  else
    repo_name = package_name
  end
  repo = "#{gh_organization}/#{repo_name}"

  tag = "debian/#{version.gsub(?:,?%).gsub(?~,?_)}"
  files = change_fields['Files'].map { |_| _.split.last }
  
  dsc_file = files.find{|_| _.end_with?('.dsc') }
  dsc = File.read(File.join(File.dirname(File.expand_path(change_path)), dsc_file))
  dsc_fields = parse_debian_metafile(dsc)
  
  files += dsc_fields['Files'].map { |_| _.split.last }
  files.uniq!
  files.map! {|_| File.join(File.dirname(File.expand_path(change_path)), _) }

  {
    path: change_path,
    changes: changes,
    dsc: dsc,
    change_arch: change_arch,
    package_name: package_name,
    version: version,
    distro: distro,
    arch: arch,
    repo: repo,
    tag: tag,
    files: files,
  }
end.group_by do |change|
  change[:tag]
end.each do |tag, changes| 
  raise "!?" if changes.map {|_| [_[:package_name], _[:version], _[:distro]] }.uniq.size != 1

  package_name = changes.first[:package_name]
  version = changes.first[:version]
  distro = changes.first[:distro]
  repo = changes.first[:repo]
 
  puts "=> Releasing the following package:"
  puts
  puts " #{package_name} #{version}"
  puts
  puts " * git tag: #{tag}"
  puts " * files: #{changes.map {|_| _[:files] }.join(', ')}"
  puts
  puts " * distro: #{distro}"
  puts " * arch: #{changes.map {|_| _[:arch] }.uniq.join(', ')}"
  puts " * change arch: #{changes.map {|_| _[:change_arch] }.uniq.join(', ')}"
  puts
  puts "=> Releasing to GitHub #{repo}: #{tag}"
  
  if changes.size == 1
    body = ['### Changes', '', '```', changes.first[:changes], '```', '', '### dsc', '', '```', changes.first[:dsc], '```']
  else
    body = []
    body.push('### Changes', '')
    changes.each {|_| body.push("#### #{_[:change_arch]}", '', '```', _[:changes], '```', '') }
    body.push('### dsc', '')
    changes.each {|_| body.push("#### #{_[:change_arch]}", '', '```', _[:dsc], '```', '') }
  end

  if ENV['NO_GITHUB']
    puts ' ! SKIPPING GitHub Release'
    next
  end

  release = octo.create_release(repo, tag, body: body.join("\n"))
  
  puts
  puts " * release: #{release[:url]}"
  
  changes.each do |change|
    [change.fetch(:path), *change[:files]].each do |file|
      content_type = {
        'deb' => 'application/vnd.debian.binary-package',
        'ddeb' => 'application/vnd.debian.binary-package',
        'changes' => 'text/plain',
        'dsc' => 'text/plain',
        'buildinfo' => 'text/plain',
        'xz' => 'application/x-xz',
        'gz' => 'application/x-gzip',
      }[file.split(?.).last]

      if changes.size == 1
        name = File.basename(file)
      else
        name = "#{change[:change_arch]}--#{File.basename(file)}"
      end

      asset = octo.upload_asset(release.url, file, content_type: content_type, name: name)

      puts " * asset: #{asset.name} #{asset.browser_download_url}"
      deb_files << {package: package_name, version: version, distro: distro, arch: change[:arch], path: file, name: name}
    end
  end
  puts
end

case target
when :bintray
  puts "=> Adding to bintray #{bintray_repo}"

  deb_files.each do |deb|
    next unless deb[:path].end_with?('.deb')
    url = URI("https://api.bintray.com/content/#{bintray_repo}/" \
              "#{URI.encode_www_form_component(deb[:package])}/" \
              "#{URI.encode_www_form_component(deb[:version])}/" \
              "#{URI.encode_www_form_component(deb[:distro])}/pool/#{deb[:package][0]}/#{URI.encode_www_form_component(deb[:name])};" \
              "deb_distribution=#{URI.encode_www_form_component(deb[:distro])};" \
              "deb_architecture=#{URI.encode_www_form_component(deb[:arch])};" \
              "deb_component=main;" \
              "publish=1;override=1")
    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = url.scheme == 'https'
    http.start do
      print "* #{deb[:path]} => #{url.path} ... "
      File.open(deb[:path], 'r') do |io|
        req = Net::HTTP::Put.new(url)
        req.basic_auth(*config['bintray_api_key'].split(?:))
        req['Content-Type'] = 'application/vnd.debian.binary-package'
        req['X-GPG-PASSPHRASE'] = config['bintray_gpg_key_passphrase']
        req['Transfer-Encoding'] = 'chunked'
        req.body_stream = io
        http.request(req)
      end
      puts "done"
    end
  end
when :aptly
  puts "=> Adding to aptly"

  deb_files_by_dist =  deb_files.group_by {|_| _[:distro] }
  deb_files_by_dist.each do |distro, files|
    puts  "  * distro=#{distro}"
    ret = system("aptly", "repo", "add", "#{aptly_repo}-#{distro}", *files.map {|_| _[:path] }.grep(/\.dsc$|\.d?deb$/))
    exit $? unless ret
  end

  puts "=> Publish repository"

  deb_files_by_dist.each_key do |distro|
    puts "  * #{distro}, #{aptly_endpoint}"
    # aptly publish repo -distribution=x -architecture=amd64 -gpg-key=805E57E2327EE86EB8180E0669CEB9D53F0F56A8 sorah-ruby-x s3:sorah-ruby:
    ret = system(*%w(aptly publish update), "-gpg-key=#{aptly_gpg_key}", distro, aptly_endpoint)
    exit $? unless ret
  end
end
